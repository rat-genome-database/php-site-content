<?php

/**
 * Ontology Reports  
 * $Revision: 1.16 $
 * $Date: 2007/04/26 19:29:35 $
 * Created by Wes Rood 
 * 
 */

 
function ont_obsoleteTerms() {
  // user ids for annotations generated by pipelines
  $PIPELINE_USER_IDS = "66,67,68,69,70,71,105,170,171,172,190,191,192,206,207,209,213";

  $xdbLink = 'http://www.godatabase.org/cgi-bin/amigo/go.cgi?view=details&search_constraint=terms&depth=0&query=';
  
  if (!userLoggedIn()) {
    return NOTLOGGEDIN_MSG;
  }  
  setPageTitle('Obsolete Terms');
  $toReturn = '';
  $toReturn .= 'These terms are either obsolete or no longer in our database, but we still have annotations referencing them.  Click "view annotations" to see the orphaned annotations and either delete them or change them to reference a different term.<br/><br/>';
  $items = fetchRecords('SELECT DISTINCT term_acc, term, ont_id, aspect, reference_type
    FROM (
		SELECT t.term_acc, t.term, o.ont_id, o.aspect, f.created_by, f.ref_rgd_id FROM full_annot f,ont_terms t,ontologies o
		WHERE t.is_obsolete<>0 and f.term_acc=t.term_acc and t.ont_id=o.ont_id 
		UNION ALL
		SELECT f.term_acc, f.term, \'(deleted)\' ont_id, f.aspect, f.created_by, f.ref_rgd_id FROM full_annot f
		WHERE NOT EXISTS(SELECT 1 FROM ont_terms t WHERE t.term_acc=f.term_acc)
	) x, references r
	WHERE ref_rgd_id=r.rgd_id(+) AND created_by NOT IN('.$PIPELINE_USER_IDS.')
	ORDER BY aspect,LOWER(term)');
  $table = newTable('','TERM', 'ONT_ID', 'ASPECT', 'TERM_ACC', 'REFERENCE_TYPE');
  $table->setAttributes("class=simple");
 
  foreach ($items as $item) {
    extract ($item);
    
    if($ASPECT == 'B'){
        $xdbLink = 'http://bioportal.bioontology.org/ontologies/45741/?p=terms&conceptid=';
	}else if($ASPECT == 'C'){
        $xdbLink = 'http://www.godatabase.org/cgi-bin/amigo/go.cgi?view=details&search_constraint=terms&depth=0&query=';
	}else if($ASPECT == 'D'){
        $xdbLink = 'http://rgd.mcw.edu/rgdweb/ontology/annot.html?acc_id=';
	}else if($ASPECT == 'E'){
        $xdbLink = 'http://bioportal.bioontology.org/ontologies/47419?p=terms&conceptid=';
	}else if($ASPECT == 'F'){
        $xdbLink = 'http://www.godatabase.org/cgi-bin/amigo/go.cgi?view=details&search_constraint=terms&depth=0&query=';
	}else if($ASPECT == 'L'){
        $xdbLink = 'http://bioportal.bioontology.org/ontologies/47157/?p=terms&conceptid=';
	}else if($ASPECT == 'M'){
        $xdbLink = 'http://bioportal.bioontology.org/ontologies/47158/?p=terms&conceptid=';
	}else if($ASPECT == 'N'){
        $xdbLink = 'http://bioportal.bioontology.org/ontologies/46433?p=terms&conceptid=';
	}else if($ASPECT == 'P'){
        $xdbLink = 'http://www.godatabase.org/cgi-bin/amigo/go.cgi?view=details&search_constraint=terms&depth=0&query=';
	}else if($ASPECT == 'S'){
        $xdbLink = 'http://bioportal.bioontology.org/ontologies/47163/?p=terms&conceptid=';
	}else if($ASPECT == 'V'){
        $xdbLink = 'http://bioportal.bioontology.org/ontologies/47501/?p=terms&conceptid=';
	}else if($ASPECT == 'W'){
        $xdbLink = 'http://bioportal.bioontology.org/ontologies/47202/?p=terms&conceptid=';
	}else if($ASPECT == 'X'){
        $xdbLink = 'http://bioportal.bioontology.org/ontologies/47127/?p=terms&conceptid=';
	}
	else{
		$xdbLink = 'http://www.godatabase.org/cgi-bin/amigo/go.cgi?view=details&search_constraint=terms&depth=0&query=';
	}

    $table->addRow(
	    makeLink('view annotations','ont', 'annotations', 'TERM_ACC='.$TERM_ACC), 
	    $TERM, 
		$ONT_ID, 
		$ASPECT, 
		href($xdbLink.$TERM_ACC, $TERM_ACC),
		$REFERENCE_TYPE);
  }
  $toReturn .= $table->toHtml();
  $toReturn .= '<p>Note: pipeline annotations are not shown for the following user keys: '.$PIPELINE_USER_IDS;
  return $toReturn;
}

function ont_newBucket() {
  if (!userLoggedIn()) {
    return NOTLOGGEDIN_MSG;
  }
  $bucketName = getRequestVarString('BUCKETNAME');
  if (isset($bucketName)) {
    addItemToBucket('annotBuckets', $bucketName);
  }
  redirectWithMessage("Created a new bucket named $bucketName", makeUrl('ont', 'annotations', 'TERM_ACC='.getRequestVarString('TERM_ACC')));   
}


function ont_addAnnotToBucket() {
  if (!userLoggedIn()) {
    return NOTLOGGEDIN_MSG;
  }  
  $fullAnnotKey = getRequestVarNum('FULL_ANNOT_KEY');
  $fullAnnotRecord = fetchRecord('SELECT * FROM full_annot f, references r WHERE f.ref_rgd_id = r.rgd_id (+) AND f.full_annot_key = '.$fullAnnotKey);
  extract($fullAnnotRecord);
  addItemToBucket(ONT_BUCKET_PREFIX.getRequestVarString('name'), $fullAnnotKey, $fullAnnotRecord);
  redirectWithMessage('Successfully added the annotation to the bucket', makeUrl('ont', 'annotations', 'TERM_ACC='.$TERM_ACC));
}

function ont_addAnnotsToBucket() {
  if (!userLoggedIn()) {
    return NOTLOGGEDIN_MSG;
  }  
  $fullAnnotKeysStr = getRequestVarString('FULL_ANNOT_KEYS');
  $fullAnnotKeys = explode(',',$fullAnnotKeysStr);
  foreach( $fullAnnotKeys as $fullAnnotKey ) {
    $fullAnnotRecord = fetchRecord('SELECT * FROM full_annot f, references r WHERE f.ref_rgd_id = r.rgd_id (+) AND f.full_annot_key = '.$fullAnnotKey);
    extract($fullAnnotRecord);
    addItemToBucket(ONT_BUCKET_PREFIX.getRequestVarString('name'), $fullAnnotKey, $fullAnnotRecord);
  }
  redirectWithMessage('Successfully added the annotation to the bucket', makeUrl('ont', 'annotations', 'TERM_ACC='.$TERM_ACC));
}

function ont_removeAnnotFromBucket() {
  if (!userLoggedIn()) {
    return NOTLOGGEDIN_MSG;
  }  
  $fullAnnotKey = getRequestVarNum('FULL_ANNOT_KEY');
  removeItemFromBucket(ONT_BUCKET_PREFIX.getRequestVarString('name'), $fullAnnotKey);
  redirectWithMessage('Successfully moved the annotation from the bucket', makeUrl('ont', 'annotations', 'TERM_ACC='.getRequestVarString('TERM_ACC')));
}

function ont_deleteBucket() {
  deleteBucket(ONT_BUCKET_PREFIX.getRequestVarString('name'));
  removeItemFromBucket('annotBuckets', getRequestVarString('name')); 
  redirectWithMessage('deleted the bucket');
}

function ont_emptyBucket() {
  if (!userLoggedIn()) {
    return NOTLOGGEDIN_MSG;
  }  
  emptyBucketItems(ONT_BUCKET_PREFIX.getRequestVarString('name'));
  redirectWithMessage('emptied the bucket');
}

function ont_updateAnnotTerm() {
  if (!userLoggedIn()) {
    return NOTLOGGEDIN_MSG;
  }  
  $termAcc = getRequestVarString('term_acc'); 
  $annots = getBucketItems(ONT_BUCKET_PREFIX.getRequestVarString('bucketName'));
  $newFields = fetchRecord("SELECT TERM, ASPECT, TERM_ACC FROM ont_terms t,ontologies o WHERE term_acc='$termAcc' AND t.ont_id=o.ont_id");
  dbQuoteStrings($newFields);
  extract ($newFields);
  if (count($annots) > 0) {
    foreach ($annots as $annot) {
      executeUpdate("UPDATE full_annot SET term=$TERM, term_acc=$TERM_ACC, aspect=$ASPECT WHERE full_annot_key = {$annot['FULL_ANNOT_KEY']}");
    }
  }
  emptyBucketItems(ONT_BUCKET_PREFIX.getRequestVarString('bucketName'));
  redirectWithMessage('all annotations in the bucket have been updated with the new term');
  
}

function ont_deleteAnnotInBucket() {
  if (!userLoggedIn()) {
    return NOTLOGGEDIN_MSG;
  }  
  $annots = getBucketItems(ONT_BUCKET_PREFIX.getRequestVarString('bucketName'));
  if (count($annots) > 0) {
    foreach ($annots as $annot) {
      extract($annot);
      executeUpdate("delete from full_annot where full_annot_key = $FULL_ANNOT_KEY");
    }
  }
  emptyBucketItems(ONT_BUCKET_PREFIX.getRequestVarString('bucketName'));
  redirectWithMessage('all annotations in the bucket have been deleted');
 
}

function ont_bucket() {
  if (!userLoggedIn()) {
    return NOTLOGGEDIN_MSG;
  }  
  $toReturn = '';
  $bucketName = getRequestVarString('name'); 
  $toReturn .= 'with these annotations...<br/><br/>';
  $toReturn .= makeLink('delete', 'ont', 'deleteAnnotInBucket', "bucketName=$bucketName").'<br/><br/>';
  $terms = getBucketItems('TERM_OBJECT_BUCKET');
  foreach ($terms as $term) {
    extract($term);
    $toReturn .= makeLink('Update to term '.$TERM, 'ont', 'updateAnnotTerm', "term_acc=$TERM_ACC&bucketName=$bucketName").'<br/>';
  }
  if (count($terms) == 0) {
    $toReturn .= "To set to another Term, select one or more terms using the menu to the left<br/>";
  }
  $toReturn .= '<br/>';
  $toReturn .= '<br/>';
  $table = newTable('ANNOTATED OBJECT', 'OBJ NAME', 'REFERENCE / TITLE (TYPE)', 'EVIDENCE', 'WITH INFO', 'ASPECT', 'NOTES', 'QUALIFIER', 'TERM');
  $table->setAttributes("class=simple");
  
  $items = getBucketItems(ONT_BUCKET_PREFIX.getRequestVarString('name'));

  foreach ($items as $item) {
    extract($item);
    $table->addRow(makeRgdQueryLink($ANNOTATED_OBJECT_RGD_ID).' '. makeRgdQueryLink($OBJECT_SYMBOL), $OBJECT_NAME, makeRgdQueryLink($REF_RGD_ID).' '. $TITLE.' ('.$REFERENCE_TYPE.')', $EVIDENCE, makeRgdQueryLink($WITH_INFO), $ASPECT, $NOTES, $QUALIFIER, $TERM);
  }
  $toReturn .= $table->toHtml();
  return $toReturn;
}

function ont_annotations() {
  if (!userLoggedIn()) {
    return NOTLOGGEDIN_MSG;
  }  
  // user ids for annotations generated by pipelines
  $PIPELINE_USER_IDS = "66,67,68,69,70,71,105,170,171,172,190,191,192,206,207,209,213";

  $toReturn = '';
  $termAcc = getRequestVarString('TERM_ACC');
  
 
  $term = $termAcc; 
  $items = fetchRecords("SELECT * FROM full_annot a, references r WHERE a.ref_rgd_id=r.rgd_id(+) AND term_acc = ".dbQuoteString($termAcc)
  .' AND created_by NOT IN('.$PIPELINE_USER_IDS.')'); // exclude non-manual annotations
  $table = newTable('EDIT','ADD TO BUCKET', 'ANNOTATED OBJECT / OBJ NAME', 'REFERENCE / TITLE (TYPE)', 'EVIDENCE', 'WITH INFO', 'ASPECT', 'NOTES', 'QUALIFIER', 'TERM');
  $table->setAttributes("class=simple");

  $annotBuckets = getBucketItems('annotBuckets');
  $full_annot_keys = '';
  
  foreach ($items as $item) {
    $bucketLinks = '';
    extract ($item);
	
	if( !empty($full_annot_keys) ) {
	  $full_annot_keys .= ',';
	}
	$full_annot_keys .= $FULL_ANNOT_KEY;
	
    $inBucket = NULL;
    foreach ($annotBuckets as $annotBucket) {
      $bucketItems = getBucketItems(ONT_BUCKET_PREFIX.$annotBucket);
      // see if this annot record is already in a bucket
      if (isset($bucketItems[$FULL_ANNOT_KEY])) {
        $inBucket = $annotBucket;
      }
      $bucketLinks .= makeLink($annotBucket, 'ont', 'addAnnotToBucket', 'name='.$annotBucket.'&FULL_ANNOT_KEY='.$FULL_ANNOT_KEY).' ';
    }
    // just show the bucket instead of the links if this annot is in a bucket:
	// Changed to show links to remove item from a bucket   WLiu 12/19/2012
    if (isset($inBucket)) {
      $bucketLinks = makeLink("Remove from $inBucket", 'ont', 'removeAnnotFromBucket', 'name='.$annotBucket.'&FULL_ANNOT_KEY='.$FULL_ANNOT_KEY.'&TERM_ACC='.$termAcc).' ';
    }
    $editLink = "<a href='/rgdweb/curation/edit/editAnnotation.html?rgdId=" . $ANNOTATED_OBJECT_RGD_ID . "'>Edit</a>";

    $table->addRow($editLink, $bucketLinks, makeRgdQueryLink($ANNOTATED_OBJECT_RGD_ID).' '. makeRgdQueryLink($OBJECT_SYMBOL).' / '.$OBJECT_NAME, makeRgdQueryLink($REF_RGD_ID).' '. $TITLE.' ('.$REFERENCE_TYPE.')', $EVIDENCE, makeRgdQueryLink($WITH_INFO), $ASPECT, $NOTES, $QUALIFIER, $TERM);
    $term = $TERM;
  }
  setPageTitle("Orphaned annotations for obsolete term: $term");
  
	if (strpos($termAcc, "GO") === false) {
		if (strpos($termAcc, "MP") === false) {
			if (strpos($termAcc, "CMO") === false) {
				if (strpos($termAcc, "CHEBI") === false) {
					if (strpos($termAcc, "MMO") === false) {
						if (strpos($termAcc, "NBO") === false) {
							if (strpos($termAcc, "PW") === false) {
								if (strpos($termAcc, "RDO") === false) {
									if (strpos($termAcc, "RS") === false) {
										if (strpos($termAcc, "VT") === false) {
											if (strpos($termAcc, "XCO") === false) {
												$toReturn .= center('Obsolete term has no Referring site '.href('http://rgd.mcw.edu/rgdweb/ontology/annot.html?acc_id=' . $termAcc, $termAcc)) .'<br/>';
											}else{
												$toReturn .= center('View Experimental Conditions Term at RGD '.href('http://bioportal.bioontology.org/ontologies/47127/?p=terms&conceptid=' . $termAcc, $termAcc)) .'<br/>';
											}
										}else{
											$toReturn .= center('View Vertebrate Trait Term on Bio Ontology site '.href('http://bioportal.bioontology.org/ontologies/47501/?p=terms&conceptid=' . $termAcc, $termAcc)) .'<br/>';
										}
									}else{
										$toReturn .= center('View Rat Strain Term at RGD '.href('http://bioportal.bioontology.org/ontologies/47163/?p=terms&conceptid=' . $termAcc, $termAcc)) .'<br/>';
									}
								}else{
									$toReturn .= center('View Disease Term at RGD '.href('http://rgd.mcw.edu/rgdweb/ontology/annot.html?acc_id=' . $termAcc, $termAcc)) .'<br/>';
								}
							}else{
								$toReturn .= center('View Pathway Term at RGD '.href('http://bioportal.bioontology.org/ontologies/47202/?p=terms&conceptid=' . $termAcc, $termAcc)) .'<br/>'; 
							}
						}else{
							$toReturn .= center('View Neurobehavioural Term on Bio Ontology site '.href('http://bioportal.bioontology.org/ontologies/45741/?p=terms&conceptid=' . $termAcc, $termAcc)) .'<br/>'; 
						}
					}else{
						$toReturn .= center('View Measurement Methods Term at RGD '.href('http://bioportal.bioontology.org/ontologies/47158/?p=terms&conceptid=' . $termAcc, $termAcc)) .'<br/>'; 
					}
				}else{
					$toReturn .= center('View Chemical Term on Bio Ontology site '.href('http://bioportal.bioontology.org/ontologies/47419?p=terms&conceptid=' . $termAcc, $termAcc)) .'<br/>';
				}
			}else{
				$toReturn .= center('View Clinical Measurement Term at RGD '.href('http://bioportal.bioontology.org/ontologies/47157/?p=terms&conceptid=' . $termAcc, $termAcc)) .'<br/>';
			}
		}else{
			$toReturn .= center('View Mammalian Phenotype Term on Bio Ontology site '.href('http://bioportal.bioontology.org/ontologies/46433?p=terms&conceptid=' . $termAcc, $termAcc)) .'<br/>';
		}
	}else{
		$toReturn .= center('View this term at the GO website '.href('http://www.godatabase.org/cgi-bin/amigo/go.cgi?view=details&search_constraint=terms&depth=0&query='.$termAcc, $termAcc)).'<br/>';
	}
  
  

  if (sizeOf($items) == 0) {
     $toReturn.="<center><span style='color:red;'>0 annotations found for this term</span></center><br>";
  }
  $newBucketForm = newForm('New Bucket', 'POST', 'ont', 'newBucket', 'newBucket');
  $newBucketForm->addText('BUCKETNAME', '', 4, 8, false);
  $newBucketForm->addHidden('TERM_ACC', $termAcc);
  $toReturn .= $newBucketForm->formStart();
  $toReturn .= $newBucketForm->renderField('BUCKETNAME').' ';
  $toReturn .= $newBucketForm->formEnd();
  
    $bucketLinks = '';
    foreach ($annotBuckets as $annotBucket) {
      $bucketItems = getBucketItems(ONT_BUCKET_PREFIX.$annotBucket);
      $bucketLinks .= makeLink('[Add all terms to bucket '.$annotBucket.'] &nbsp;', 'ont', 'addAnnotsToBucket', 'name='.$annotBucket.'&FULL_ANNOT_KEYS='.$full_annot_keys).' ';
    }
    $toReturn .= $bucketLinks;

  $toReturn .= $table->toHtml();
  return $toReturn;
  
}

?>
